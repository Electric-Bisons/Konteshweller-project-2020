//  Coding Rules for AVR

- use only effiecint data types for memory saving, like uint8_t for 8 bit, uint16_t for 16 bit, etc.
- be careful to signed unsigned types 
- use bitfields for efficient data size in struct types
- use descriptive names for data variables and functions: u8Data, tempu8Data for uint8_t or u16Data for uint16_t, etc.
- comment almost every line of code for good understanding
- external variables should be declared inside header files
- make intialization for any variable if you can
- use efficient names for files like "driver_usart.h" or "driver_timers.h"
- write small and efficient code so no useless code lines and variables are used
- ues defines when you can for general purpose and easy debugging
- place drivers inside specific folder and all of them inside src/headers folder to keep the code clean
- try to avoid floats or double data types
- create clean code for reading and for debugging to avoid confussion: indents,
  spaces like "if( u8Data > foo )" and in functions like "uint8_t fooFunction(uin8_t param1, uint16_t param2)", etc.
- use functions when you can, but don't do overengineering code
