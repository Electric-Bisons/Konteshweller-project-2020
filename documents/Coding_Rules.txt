// Coding Rules for AVR

1. Comments

1.1 Comment almost every line of code for good understanding.
1.2 Start each comment with a capital letter. Only for more than 1 line of comment use small letters.


2. Data types

2.1 Use only effiecint data types for memory saving, like uint8_t for 8 bit, uint16_t for 16 bit, etc.
2.2 Be careful when using signed or unsigned types to avoid overflow.
2.3 Use bitfields for efficient data size in struct types.
2.4 Make declaration and intialization for any variable you can.
2.5 Avoid floats data types.


3. Namings

3.1 Use descriptive names for data variables and functions: u8Data, tempu8Data, u16Data, USART0_init(), fooFunction() etc.
3.2 Use descriptive names for files, like "driver_usart.h" or "driver_timers.h".
3.3 Global variables should be named gu8Data.
3.4 Constant variables should be named like cu8Data.
3.5 Volatile variables should be named like vu8Data.
3.6 Static variables should be named like su8Data.


4. Organization of the Code

4.1 Write small and efficient code so no useless lines of code and variables are used.
4.2 External variables should be declared inside header files.
4.3 Use defines when you can for general purpose and easy debugging.
4.4 Be careful to check for existing defintions.
4.5 Use functions when you can, but don't do overengineering code.
4.6 Place drivers inside specific folder (ex: "src/headers/" folder) to keep the code clean.
4.7 Create clean code for reading and for debugging and to avoid confussion. You should use indents, spaces between operators, etc.
